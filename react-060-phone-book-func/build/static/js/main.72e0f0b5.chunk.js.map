{"version":3,"sources":["component/PhoneInsert.jsx","component/PhoneList.jsx","component/PhoneMain.jsx","App.js","reportWebVitals.js","index.js"],"names":["PhoneInsert","insertPhoneBook","useReducer","obj","action","type","name","number","value","state","dispatch","onChange","e","target","class","placeholder","onClick","PhoneList","phoneBooks","editPhoneBook","deletePhoneBook","trOnClick","className","closest","dataset","id","console","log","window","confirm","alert","phoneItems","map","phone","editable","data-name","data-id","PhoneMain","nextId","useRef","useState","setPhoneBooks","editBooks","Number","filterBooks","filter","current","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.72e0f0b5.chunk.js","sourcesContent":["import \"../css/PhoneInsert.css\";\nimport React, { useState, useReducer } from \"react\";\n\nconst PhoneInsert = ({ insertPhoneBook }) => {\n  //\n  //\n  // useState를 useReducer로 변경하여 한개의 이벤트 핸들러로 모든 input box의 change event를 핸들링할수 있다\n  // const [name, setName] = useState(\"\");\n  // const [number, setNumber] = useState(\"\");\n  // const onChangeName = (e) => {\n  //   setName(e.target.value);\n  // };\n  // const onChangeNumber = (e) => {\n  //   setNumber(e.target.value);\n  // };\n  //\n  //\n\n  /**\n   *\n   *\n   * state 변수를 Reducer로 관리하기\n   * state : 공통으로 사용할 변수(변수명 아님)\n   * dispatch : state 변수를 변경할때 사용할 action\n   *    dispatch()함수에 매개변수를 넘기고 실행하면\n   *    reducer(obj, action)로 설정한 함수가 매칭된다\n   *    reducer 매개변수 action에는 type 속성을 추가하고\n   *    이 type을 비교하여 어려가지 연산을 수행한다.\n   */\n  // reducer의 dispatch에 연결할 callback\n  const reducer = (obj, action) => {\n    if (action.type === \"CLEAR_FORM\") return { name: \"\", number: \"\" };\n    return {\n      ...obj,\n      [action.name]: action.value,\n    };\n  };\n\n  // useReducer()를 사용하여 sate 변수와 dispatch설정\n  const [state, dispatch] = useReducer(reducer, {\n    name: \"\",\n    number: \"\",\n  });\n\n  // reducer로 선언된 변수를 Component에서 사용할 수 있도록 선언\n  const { name, number } = state;\n\n  // reducer의 dispatch를 이용하여 여러개의 input box chanage event를 하나로 공통처리\n  const onChange = (e) => {\n    dispatch(e.target);\n  };\n\n  const onClick = (e) => {\n    insertPhoneBook(name, number);\n\n    // dispatch함수를 호출하면서 type 값을 설정하여 매개변수로 전달\n    // reducer에서 action.type 값으로 참조할 수 있다.\n    dispatch({ type: \"CLEAR_FORM\" });\n    // setName(\"\");\n    // setNumber(\"\");\n  };\n\n  return (\n    <form class=\"phoneForm\">\n      <input placeholder=\"이름\" name=\"name\" value={name} onChange={onChange} />\n      <input\n        placeholder=\"전화번호\"\n        name=\"number\"\n        value={number}\n        onChange={onChange}\n      />\n      <button\n        onClick={onClick}\n        //(e) => {\n        //  insertPhoneBook(name, number);\n        // }}\n        type=\"button\"\n      >\n        저장\n      </button>\n    </form>\n  );\n};\n\nexport default PhoneInsert;\n","import \"../css/PhoneList.css\";\nimport React, { useReducer } from \"react\";\n\n// (props) : 전달받은 매개변수 모두를 사용하겠다\n// {변수명} : 전달받은 매개변수중 변수명에 해당하는\n//      값만 추출해달라\nconst PhoneList = ({ phoneBooks, editPhoneBook, deletePhoneBook }) => {\n  const reducer = (obj, action) => {\n    if (action.type === \"CLEAR_FORM\") return { name: \"\", number: \"\" };\n    return {\n      ...obj,\n      [action.name]: action.value,\n    };\n  };\n\n  // useReducer()를 사용하여 sate 변수와 dispatch설정\n  const [state, dispatch] = useReducer(reducer, {\n    name: \"\",\n    number: \"\",\n  });\n\n  // reducer로 선언된 변수를 Component에서 사용할 수 있도록 선언\n  // const { name, number } = state;\n\n  // reducer의 dispatch를 이용하여 여러개의 input box chanage event를 하나로 공통처리\n  const onChange = (e) => {\n    dispatch(e.target);\n  };\n\n  const trOnClick = (e) => {\n    const className = e.target.className;\n    const closest = e.target.closest(\"TR\");\n    const name = closest.dataset.name;\n    const id = closest.dataset.id;\n    console.log(id, name);\n    if (className === \"delete\") {\n      if (window.confirm(\"정말 삭제합니다!!!\")) {\n        deletePhoneBook(id);\n      }\n      return false;\n    } else if (className === \"update-ok\") {\n      alert(\"변경할래 ?!!?!?!\");\n    }\n    editPhoneBook(id);\n  };\n\n  const phoneItems = phoneBooks.map((phone) => {\n    console.log(phone.editable);\n    if (phone.editable) {\n      return (\n        <tr\n          key={phone.id}\n          onClick={trOnClick}\n          data-name={phone.name}\n          data-id={phone.id}\n          className=\"update\"\n        >\n          <td>\n            <input value={phone.name} className=\"update\" onChange={onChange} />\n          </td>\n          <td>\n            <input\n              value={phone.number}\n              className=\"update\"\n              onChange={onChange}\n            />\n          </td>\n          <td className=\"update-ok\">&#10003;</td>\n        </tr>\n      );\n    } else {\n      return (\n        <tr\n          key={phone.id}\n          onClick={trOnClick}\n          data-name={phone.name}\n          data-id={phone.id}\n        >\n          <td>{phone.name}</td>\n          <td>{phone.number}</td>\n          <td className=\"delete\">&times;</td>\n        </tr>\n      );\n    }\n  });\n\n  return (\n    <table class=\"phoneList\">\n      <thead>\n        <tr>\n          <th>이름</th>\n          <th>전화번호</th>\n          <th>&hearts;</th>\n        </tr>\n      </thead>\n      <tbody>{phoneItems}</tbody>\n    </table>\n  );\n};\n\nexport default PhoneList;\n","import React, { useState, useRef } from \"react\";\nimport \"../css/PhoneMain.css\";\nimport PhoneInsert from \"./PhoneInsert\";\nimport PhoneList from \"./PhoneList\";\n\nconst PhoneMain = () => {\n  const nextId = useRef(4);\n  const [phoneBooks, setPhoneBooks] = useState([\n    { id: 1, name: \"이몽룡\", number: \"010-111\", editable: false },\n    { id: 2, name: \"성춘향\", number: \"010-222\", editable: false },\n    { id: 3, name: \"홍길동\", number: \"010-333\", editable: false },\n  ]);\n\n  const insertPhoneBook = (name, number) => {\n    setPhoneBooks([\n      ...phoneBooks,\n      { id: nextId.current++, name: name, number: number, editable: false },\n    ]);\n  };\n\n  const deletePhoneBook = (id) => {\n    console.log(\"삭제할 ID\", id);\n    const filterBooks = phoneBooks.filter((phone) => {\n      console.log(phone.id, id);\n      return phone.id !== Number(id);\n    });\n    console.log(filterBooks);\n    setPhoneBooks(filterBooks);\n  };\n\n  const editPhoneBook = (id) => {\n    const editBooks = phoneBooks.map((phone) => {\n      if (phone.id === Number(id)) {\n        return { ...phone, editable: true };\n      } else {\n        return { ...phone, editable: false };\n      }\n    });\n    setPhoneBooks(editBooks);\n  };\n\n  return (\n    <div className=\"phoneMain\">\n      <h1>나만의 주소록</h1>\n\n      <PhoneList\n        phoneBooks={phoneBooks}\n        editPhoneBook={editPhoneBook}\n        deletePhoneBook={deletePhoneBook}\n      />\n      <PhoneInsert insertPhoneBook={insertPhoneBook} />\n    </div>\n  );\n};\n\nexport default PhoneMain;\n","import \"./App.css\";\nimport PhoneMain from \"./component/PhoneMain\";\n\nfunction App() {\n  return (\n    <>\n      <PhoneMain />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}