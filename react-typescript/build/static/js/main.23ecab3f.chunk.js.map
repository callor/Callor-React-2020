{"version":3,"sources":["Greetings.tsx","Counter.tsx","CounterReducer.tsx","InputForm.tsx","ReducerSample.tsx","todoList/contexts/TodoContext.tsx","todoList/TodoForm.tsx","todoList/TodoItem.tsx","todoList/TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Greetings","name","mark","Counter","useState","count","setCount","onClick","reducer","state","action","type","Error","useReducer","dispatch","InputForm","onSubmit","inputRef","useRef","description","form","setForm","onChange","e","target","value","preventDefault","current","focus","ref","text","color","isGood","ReducerSample","TodosStateContext","createContext","undefined","TodosDispatchContext","todosReducer","nextId","Math","max","map","todo","id","concat","done","filter","TodosContextProvider","children","todos","Provider","useTodosDispatch","useContext","TodoForm","setValue","placeholder","TodoItem","className","TodoList","useTodosState","key","App","style","margin","console","log","CounterReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.23ecab3f.chunk.js","sourcesContent":["import React from \"react\";\n\ntype GreetingsProps = {\n  name: string;\n  mark: string;\n};\n\nconst Greetings = ({ name, mark }: GreetingsProps) => (\n  <div>\n    Hello, {name} {mark}\n  </div>\n);\n\nexport default Greetings;\n","import React, { useState } from \"react\";\n\n/*\n객체를 만드는 2가지 방법\ntype, interface  키워드로 생성\n\n*/\ntype Information = { name: string; description: string };\ninterface Todo {\n  id: number;\n  text: string;\n  done: boolean;\n}\n\nfunction Counter() {\n  /*\n    useState를 사용 할 때 Generics 를 사용하지 않아도 \n    알아서 타입을 유추하기 때문에 생략해도 상관없다.\n\n    상태가 null일 수도 있고 아닐수도 있을때는 Generics 를 사용하자\n    \n\n    상태의 타입이 까다로운 구조를 가진 객체이거나 배열일 때는 Generics 를 명시하는 것이 좋다\n    */\n  const [count, setCount] = useState<number>(0);\n  const [info, setInformation] = useState<Information | null>(null);\n\n  // 빈 배열만 넣었을 때\n  // 해당 배열이 어떤 타입으로 이루어진 배열인지 추론 할 수 없기 때문에\n  // Generics 를 명시해야 한다\n  const [todos, setTodos] = useState<Todo[]>([]);\n\n  const onIncrease = () => setCount(count + 1);\n  const onDecrease = () => setCount(count - 1);\n  return (\n    <div>\n      <h1>{count}</h1>\n      <div>\n        <button onClick={onIncrease}>+1</button>\n        <button onClick={onDecrease}>-1</button>\n      </div>\n    </div>\n  );\n}\n\nexport default Counter;\n","import React, { useReducer } from \"react\";\n\ntype Action = { type: \"INCREASE\" } | { type: \"DECREASE\" }; // 이렇게 액션을 | 으로 연달아서 쭉 나열하세요.\n\nfunction reducer(state: number, action: Action): number {\n  switch (action.type) {\n    case \"INCREASE\":\n      return state + 1;\n    case \"DECREASE\":\n      return state - 1;\n    default:\n      throw new Error(\"Unhandled action\");\n  }\n}\n\nfunction Counter() {\n  const [count, dispatch] = useReducer(reducer, 0);\n  const onIncrease = () => dispatch({ type: \"INCREASE\" });\n  const onDecrease = () => dispatch({ type: \"DECREASE\" });\n\n  return (\n    <div>\n      <h1>{count}</h1>\n      <div>\n        <button onClick={onIncrease}>+1</button>\n        <button onClick={onDecrease}>-1</button>\n      </div>\n    </div>\n  );\n}\n\nexport default Counter;\n","import React, { useState, useRef } from \"react\";\n\ninterface InputFormProps {\n  onSubmit: (form: { name: string; description: string }) => void;\n}\n\nfunction InputForm({ onSubmit }: InputFormProps) {\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [form, setForm] = useState({\n    name: \"\",\n    description: \"\",\n  });\n\n  const { name, description } = form;\n\n  // e 값을 무엇으로 설정해야할까요?\n  // 일단 모를떄는 any 로 설정합니다.\n\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n    setForm({\n      ...form,\n      [name]: value,\n    });\n  };\n\n  // 여기도 모르니까 any 로 하겠습니다.\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    onSubmit(form);\n    setForm({\n      name: \"\",\n      description: \"\",\n    }); // 초기화\n    if (!inputRef.current) {\n      return;\n    }\n    inputRef.current.focus();\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input name=\"name\" value={name} onChange={onChange} ref={inputRef} />\n      <input name=\"description\" value={description} onChange={onChange} />\n      <button type=\"submit\">등록</button>\n    </form>\n  );\n}\n\nexport default InputForm;\n","import React, { useReducer } from \"react\";\n\ntype Color = \"red\" | \"orange\" | \"yellow\";\n\ntype State = {\n  count: number;\n  text: string;\n  color: Color;\n  isGood: boolean;\n};\n\ntype Action =\n  | { type: \"SET_COUNT\"; count: number }\n  | { type: \"SET_TEXT\"; text: string }\n  | { type: \"SET_COLOR\"; color: Color }\n  | { type: \"TOGGLE_GOOD\" };\n\nfunction reducer(state: State, action: Action): State {\n  /*\n  객체에서 spread(전개) 연산자의 사용\n  state객체를 풀어해치고\n  state.text 필드의 값을 action.text 값으로 대치한다\n  그리고 새로운 객체( {} )로 만들어 return 한다.\n  return {\n        ...state,\n        text: action.text,\n  }\n  */\n  switch (action.type) {\n    case \"SET_COUNT\":\n      return {\n        ...state,\n        count: action.count, // count가 자동완성되며, number 타입인걸 알 수 있습니다.\n      };\n    case \"SET_TEXT\":\n      return {\n        ...state,\n        text: action.text, // text가 자동완성되며, string 타입인걸 알 수 있습니다.\n      };\n    case \"SET_COLOR\":\n      return {\n        ...state,\n        color: action.color, // color 가 자동완성되며 color 가 Color 타입인걸 알 수 있습니다.\n      };\n    case \"TOGGLE_GOOD\":\n      return {\n        ...state,\n        isGood: !state.isGood,\n      };\n    default:\n      throw new Error(\"Unhandled action\");\n  }\n}\n\nfunction ReducerSample() {\n  const [state, dispatch] = useReducer(reducer, {\n    count: 0,\n    text: \"hello\",\n    color: \"red\",\n    isGood: true,\n  });\n\n  const setCount = () => dispatch({ type: \"SET_COUNT\", count: 5 }); // count 를 넣지 않으면 에러발생\n  const setText = () => dispatch({ type: \"SET_TEXT\", text: \"bye\" }); // text 를 넣지 않으면 에러 발생\n  const setColor = () => dispatch({ type: \"SET_COLOR\", color: \"orange\" }); // orange 를 넣지 않으면 에러 발생\n  const toggleGood = () => dispatch({ type: \"TOGGLE_GOOD\" });\n\n  return (\n    <div>\n      <p>\n        <code>count: </code> {state.count}\n      </p>\n      <p>\n        <code>text: </code> {state.text}\n      </p>\n      <p>\n        <code>color: </code> {state.color}\n      </p>\n      <p>\n        <code>isGood: </code> {state.isGood ? \"true\" : \"false\"}\n      </p>\n      <div>\n        <button onClick={setCount}>SET_COUNT</button>\n        <button onClick={setText}>SET_TEXT</button>\n        <button onClick={setColor}>SET_COLOR</button>\n        <button onClick={toggleGood}>TOGGLE_GOOD</button>\n      </div>\n    </div>\n  );\n}\n\nexport default ReducerSample;\n","import React, { createContext, Dispatch, useReducer, useContext } from \"react\";\n\n// 나중에 다른 컴포넌트에서 타입을 불러와서 쓸 수 있도록\n// 클래스(interface)를 선언하여 내보내기\nexport interface Todo {\n  id: number;\n  text: string;\n  done: boolean;\n}\n\ntype TodosState = Todo[];\n\nconst TodosStateContext = createContext<TodosState | undefined>(undefined);\n\n// 액션들의 타입을 선언해주고 나면,\n// 우리가 디스패치를 위한 Context를 만들 때\n// 디스패치 함수의 타입을 설정 할 수 있게 된다.\ntype Action =\n  | { type: \"CREATE\"; text: string }\n  | { type: \"TOGGLE\"; id: number }\n  | { type: \"REMOVE\"; id: number };\n\n/*\n이렇게 Dispatch 를 리액트 패키지에서 불러와서 \nGeneric으로 액션들의 타입을 넣어주면 \n추후 컴포넌트에서 액션을 디스패치 할 때 \n액션들에 대한 타입을 검사 할 수 있다. \n예를 들어서, 액션에 추가적으로 필요한 값 (예: text, id)이 빠지면 오류가 발생한다.\n*/\ntype TodosDispatch = Dispatch<Action>;\n\nconst TodosDispatchContext = createContext<TodosDispatch | undefined>(\n  undefined\n);\n\nfunction todosReducer(state: TodosState, action: Action): TodosState {\n  switch (action.type) {\n    case \"CREATE\":\n      const nextId = Math.max(...state.map((todo) => todo.id)) + 1;\n      return state.concat({\n        id: nextId,\n        text: action.text,\n        done: false,\n      });\n    case \"TOGGLE\":\n      return state.map((todo) =>\n        todo.id === action.id ? { ...todo, done: !todo.done } : todo\n      );\n    case \"REMOVE\":\n      return state.filter((todo) => todo.id !== action.id);\n    default:\n      throw new Error(\"Unhandled action\");\n  }\n}\n\nexport function TodosContextProvider({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  const [todos, dispatch] = useReducer(todosReducer, [\n    {\n      id: 1,\n      text: \"Context API 배우기\",\n      done: true,\n    },\n    {\n      id: 2,\n      text: \"TypeScript 배우기\",\n      done: true,\n    },\n    {\n      id: 3,\n      text: \"TypeScript 와 Context API 함께 사용하기\",\n      done: false,\n    },\n  ]);\n\n  return (\n    <TodosDispatchContext.Provider value={dispatch}>\n      <TodosStateContext.Provider value={todos}>\n        {children}\n      </TodosStateContext.Provider>\n    </TodosDispatchContext.Provider>\n  );\n}\n\nexport function useTodosState() {\n  const state = useContext(TodosStateContext);\n  if (!state) throw new Error(\"TodosProvider not found\");\n  return state;\n}\n\nexport function useTodosDispatch() {\n  const dispatch = useContext(TodosDispatchContext);\n  if (!dispatch) throw new Error(\"TodosProvider not found\");\n  return dispatch;\n}\n","import React, { useState, FormEvent } from \"react\";\nimport { useTodosDispatch } from \"./contexts/TodoContext\";\n\nfunction TodoForm() {\n  const [value, setValue] = useState(\"\");\n  const dispatch = useTodosDispatch();\n\n  const onSubmit = (e: FormEvent) => {\n    e.preventDefault();\n    dispatch({\n      type: \"CREATE\",\n      text: value,\n    });\n    // 입력박스 clear, 새항목 생성\n    setValue(\"\");\n  };\n\n  return (\n    <form onSubmit={onSubmit}>\n      <input\n        value={value}\n        placeholder=\"무엇을 하실 건가요?\"\n        onChange={(e) => setValue(e.target.value)}\n      />\n      <button>등록</button>\n    </form>\n  );\n}\n\nexport default TodoForm;\n","import React from \"react\";\nimport \"./TodoItem.css\";\n\nimport { useTodosDispatch, Todo } from \"./contexts/TodoContext\";\n\ntype TodoItemProps = {\n  // TodoContext 에서 선언했던 타입을 불러왔습니다.\n  todo: Todo;\n};\n\nfunction TodoItem({ todo }: TodoItemProps) {\n  const dispatch = useTodosDispatch();\n\n  const onToggle = () => {\n    dispatch({\n      type: \"TOGGLE\",\n      id: todo.id,\n    });\n  };\n\n  const onRemove = () => {\n    dispatch({\n      type: \"REMOVE\",\n      id: todo.id,\n    });\n  };\n\n  return (\n    <li className={`TodoItem ${todo.done ? \"done\" : \"\"}`}>\n      <span className=\"text\" onClick={onToggle}>\n        {todo.text}\n      </span>\n      <span className=\"remove\" onClick={onRemove}>\n        (X)\n      </span>\n    </li>\n  );\n}\n\nexport default TodoItem;\n\n/*\nexport type TodoItemProps = {\n\n  // 데이터를 취급할 state 객체를 직접 선언\n  todo: {\n    id: number;\n    text: string;\n    done: boolean;\n  };\n};\n\nfunction TodoItem({ todo }: TodoItemProps) {\n  return (\n    <li className={`TodoItem ${todo.done ? \"done\" : \"\"}`}>\n      <span className=\"text\">{todo.text}</span>\n      <span className=\"remove\">(X)</span>\n    </li>\n  );\n}\n\nexport default TodoItem;\n*/\n","import React from \"react\";\nimport TodoItem from \"./TodoItem\";\nimport { useTodosState } from \"./contexts/TodoContext\";\n\nfunction TodoList() {\n  // TodoContext로 부터 temp 데이터 가져오기\n  const todos = useTodosState();\n  return (\n    <ul>\n      {todos.map((todo) => (\n        <TodoItem todo={todo} key={todo.id} />\n      ))}\n    </ul>\n  );\n}\n\nexport default TodoList;\n/**\n *  Custom Hooks을 사용하지 않았을 때\n *  temp 데이터 생성\n */\n/*\nfunction TodoList() {\n  const todos = [\n    {\n      id: 1,\n      text: \"Context API 배우기\",\n      done: true,\n    },\n    {\n      id: 2,\n      text: \"TypeScript 배우기\",\n      done: true,\n    },\n    {\n      id: 3,\n      text: \"TypeScript 와 Context API 함께 사용하기\",\n      done: false,\n    },\n  ];\n  return (\n    <ul>\n      {todos.map((todo) => (\n        <TodoItem todo={todo} key={todo.id} />\n      ))}\n    </ul>\n  );\n}\n\nexport default TodoList;\n*/\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Greetings from \"./Greetings\";\nimport Counter from \"./Counter\";\nimport CounterReducer from \"./CounterReducer\";\nimport InputForm from \"./InputForm\";\nimport ReducerSample from \"./ReducerSample\";\nimport { TodosContextProvider } from \"./todoList/contexts/TodoContext\";\nimport TodoForm from \"./todoList/TodoForm\";\nimport TodoList from \"./todoList/TodoList\";\n\nfunction App() {\n  const onSubmit = (form: { name: string; description: string }) => {\n    console.log(form);\n  };\n\n  return (\n    <div className=\"app\" style={{ margin: \"10px\" }}>\n      <input type=\"text\"></input>\n      <Greetings name=\"대한민국\" mark=\"Republic of Korea\" />\n      <Counter />\n      <InputForm onSubmit={onSubmit} />\n      <CounterReducer />\n      <ReducerSample />\n      <TodosContextProvider>\n        <TodoForm />\n        <TodoList />\n      </TodosContextProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}