{"version":3,"sources":["config/FirebaseConfig.js","bbs/BBsItem.jsx","bbs/BBsList.jsx","bbs/BBsMain.jsx","bbs/BBsWrite.jsx","bbs/MainMenu.jsx","App.js","serviceWorker.js","index.js"],"names":["firebase","apps","length","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","database","BBsItem","handleDetail","seq","console","log","props","history","push","bbsVO","this","onClick","b_date","b_time","b_write","b_title","Component","withRouter","BBsList","state","bbsList","ref","once","then","result","forEach","item","setState","concat","val","bbsMap","map","className","BBsMain","BBsWrite","b_text","bbsUpdate","bbsInsert","newKey","child","key","set","moment","tz","format","bbsItemFetch","match","params","handleOnChange","e","target","name","value","nextProps","nextState","class","onChange","placeholder","type","MainMenu","to","App","style","marginBottom","backgroundColor","color","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a8859a61.chunk.js","sourcesContent":["import firebase from \"firebase\";\r\n\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyDmrSP2HPlykkF46YqJuN6VgcBOs5HL3b0\",\r\n    authDomain: \"react-firebase-c028a.firebaseapp.com\",\r\n    databaseURL: \"https://react-firebase-c028a.firebaseio.com\",\r\n    projectId: \"react-firebase-c028a\",\r\n    storageBucket: \"react-firebase-c028a.appspot.com\",\r\n    messagingSenderId: \"393994014705\",\r\n    appId: \"1:393994014705:web:97436688f11fc3fb39be50\",\r\n};\r\n\r\n/*\r\n다른 js 파일에서 fire() 함수를 호출하여\r\nfirebase 초기화와 datbase 연동까지 할수 있도록 모듈 구성\r\n\r\nfirebaseConfig.js 모듈을 여러곳의 Component에서 공유하여\r\n사용할 예정인데 공유하여 사용할경우\r\nfirebase.initializeApp() method가 여러번 실행되어\r\n문제를 일이킨다.\r\n그래서 firebase.apps 항목이 이미 있으면 새로생성하지 않고\r\n없으면(!firebase.apps.length) 새로 생성하도록 코드를 변경\r\n*/\r\nif (!firebase.apps.length) {\r\n    firebase.initializeApp(firebaseConfig);\r\n}\r\nexport const database = firebase.database();\r\n","import React, { Component } from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\n/*\r\n표현할 데이터가 List 형태일때\r\nList의 한줄(한요소)를 표현하는 구조로 생성\r\n*/\r\nclass BBsItem extends Component {\r\n  handleDetail = (seq) => {\r\n    console.log(seq);\r\n\r\n    this.props.history.push(\"/bbsWrite/\" + seq);\r\n  };\r\n\r\n  render() {\r\n    const { bbsVO } = this.props;\r\n    return (\r\n      <tr key={bbsVO.seq} onClick={() => this.handleDetail(bbsVO.seq)}>\r\n        <td>{bbsVO.b_date}</td>\r\n        <td>{bbsVO.b_time}</td>\r\n        <td>{bbsVO.b_write}</td>\r\n        <td>{bbsVO.b_title}</td>\r\n      </tr>\r\n    );\r\n  }\r\n}\r\n\r\n// 현재 이(BBsItem) 컴포넌트는 Router의 1대 자손이 아니다\r\n// 1대 자손이 아닐때는 this.props.history 객체를 직접 전달받지 못한다\r\n// 1대 자손이 아닌 컴포넌트에서 this.props.history 객체를 사용하기 위해서는\r\n// 객체를 withRouter() method로 wrapping을 해야 한다.\r\nexport default withRouter(BBsItem);\r\n\r\n/*\r\n이벤트 핸들러 등록방식\r\n1. 이벤트 핸들러로 사용할 함수를 선언 handlerEvent = (매개변수)=>{ 코드 }\r\n2. 이벤트 핸들러 등록 onClick={handerEvent} 핸들러 이벤트를 등록할때는 \r\n  함수를 객체 타입으로 바꾸어서 등록을 한다\r\n  \r\n  = 함수 이름에서 괄호를 반드시 제거하고 등록 만약 이벤트 핸들러를 함수 타입\r\n  = 함수() 으로 등록을 하게 되면 각 컴포넌트가 랜더링 되는 동안 이벤트 핸들러도\r\n  등록하는 것이 아니라 함수를 호출하여 실행해 버린다\r\n  그런데 이벤트 핸들러에게 어떤 값을 전달하여 그 값을 핸들러 코드내에서 사용하고자 할때는?\r\n  가상의(익명의) 이벤트 핸들러를 등록하고 \r\n  (e)=>{}\r\n  이 익명 이벤트 핸들러에서 함수를 호출하도록 코드를 작성해 주어야 한다.\r\n  (e)=>{ 함수(e, 매겨변수) }\r\n  이렇게 등록을 하면 랜더링 하는 동안에는 \r\n  (e)=>{} 의 익명 이벤트만 바라보고 이벤트 핸들러로 등록하며\r\n  이때 내부에 작성된 코드는 모두 무시된다\r\n  비로소 모든 랜더링이 끝나고 이벤트 실행을 하게되면 이벤트 핸들러가 자신이 포함하고 있는\r\n  함수를 호출하여 원하는 코드를 실행하게 된다.\r\n*/\r\n","import React, { Component } from \"react\";\r\nimport { database } from \"../config/FirebaseConfig\";\r\nimport BBsItem from \"./BBsItem\";\r\n\r\nclass BBsList extends Component {\r\n  state = {\r\n    bbsList: [],\r\n  };\r\n\r\n  // db 읽어와서 List에 뿌려줄 LifeCyle method\r\n  componentDidMount() {\r\n    database\r\n      .ref(\"bbs\")\r\n      .once(\"value\")\r\n      .then((result) => {\r\n        result.forEach((item) => {\r\n          this.setState({\r\n            bbsList: this.state.bbsList.concat(item.val()),\r\n          });\r\n        });\r\n      });\r\n    console.log(this.state.bbsList);\r\n    // this.setState({ bbsList: [...resultList] });\r\n  }\r\n\r\n  render() {\r\n    const bbsMap = this.state.bbsList.map((bbsVO) => {\r\n      return <BBsItem bbsVO={bbsVO} key={bbsVO.seq} />;\r\n    });\r\n\r\n    return (\r\n      <>\r\n        <table className=\"table table-all table-striped table-hover\">\r\n          <thead>\r\n            <tr>\r\n              <th>작성일자</th>\r\n              <th>작성시각</th>\r\n              <th>작성자</th>\r\n              <th>제목</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>{bbsMap}</tbody>\r\n        </table>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BBsList;\r\n","import React, { Component } from \"react\";\r\n\r\nimport BBsList from \"./BBsList\";\r\n\r\nclass BBsMain extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <BBsList />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BBsMain;\r\n","import React, { Component } from \"react\";\r\nimport { database } from \"../config/FirebaseConfig\";\r\nimport moment from \"moment\";\r\nimport \"moment-timezone\";\r\n\r\nclass BBsWrite extends Component {\r\n  state = {\r\n    seq: \"\",\r\n    b_write: \"\",\r\n    b_title: \"\",\r\n    b_text: \"\",\r\n  };\r\n\r\n  bbsUpdate = () => {\r\n    console.log(\"update\");\r\n  };\r\n\r\n  bbsInsert = () => {\r\n    var newKey = this.state.seq;\r\n    if (!newKey) {\r\n      newKey = database.ref().child(\"bbs\").push().key;\r\n    }\r\n\r\n    database\r\n      .ref(\"bbs/\" + newKey)\r\n      .set({\r\n        seq: newKey,\r\n        b_date: moment().tz(\"Asia/Seoul\").format(\"YYYY-MM-DD\"),\r\n        b_time: moment().tz(\"Asia/Seoul\").format(\"HH:mm:ss\"),\r\n        b_title: this.state.b_title,\r\n        b_write: this.state.b_write,\r\n        b_text: this.state.b_text,\r\n      })\r\n      .then(() => {\r\n        // 데이터 저장이 완료되면 처음 화면으로 점프하기\r\n        // react-router로 감싸진 경우 this.props.history 객체를 통해 원한는 path로 redirect할수 있다.\r\n        this.props.history.push(\"/\");\r\n      });\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.bbsItemFetch();\r\n  }\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    return true;\r\n  }\r\n\r\n  bbsItemFetch = () => {\r\n    // 만약 ...bbsid 값이 undefined이면 0을 id에 저장하고\r\n    // 그렇지 않으면 그 문자열을 id에 저장하라\r\n    const seq = this.props.match.params.seq;\r\n    if (!seq) return;\r\n    database\r\n      .ref(\"bbs/\" + seq)\r\n      .once(\"value\")\r\n      .then((result) => {\r\n        console.log(result);\r\n        let bbsVO = result.val();\r\n        this.setState({\r\n          seq: bbsVO.seq,\r\n          b_title: bbsVO.b_title,\r\n          b_write: bbsVO.b_write,\r\n          b_text: bbsVO.b_text,\r\n        });\r\n      });\r\n  };\r\n\r\n  // input box에 데이터를 입력할수 있도록 even설정\r\n  handleOnChange = (e) => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container-fluid p-5\">\r\n        <div className=\"form-group\">\r\n          <input\r\n            class=\"form-control\"\r\n            onChange={this.handleOnChange}\r\n            value={this.state.b_write}\r\n            name=\"b_write\"\r\n            placeholder=\"작성자\"\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <input\r\n            class=\"form-control\"\r\n            onChange={this.handleOnChange}\r\n            value={this.state.b_title}\r\n            name=\"b_title\"\r\n            placeholder=\"제목\"\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <input\r\n            class=\"form-control\"\r\n            onChange={this.handleOnChange}\r\n            value={this.state.b_text}\r\n            name=\"b_text\"\r\n            placeholder=\"내용\"\r\n          />\r\n        </div>\r\n        <div className=\"button-group text-right\">\r\n          <button\r\n            type=\"button\"\r\n            onClick={this.bbsInsert}\r\n            className=\"btn btn-primary\"\r\n          >\r\n            저장\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BBsWrite;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst MainMenu = () => {\r\n  return (\r\n    <nav className=\"navbar navbar-expand bg-primary\">\r\n      <ul className=\"navbar-nav\">\r\n        <li className=\"nav-item\">\r\n          <Link to=\"/\" className=\"nav-link text-white\">\r\n            HOME\r\n          </Link>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <Link to=\"/bbsWrite\" className=\"nav-link text-white\">\r\n            자유게시판\r\n          </Link>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <Link to=\"/admin\" className=\"nav-link text-white\">\r\n            관리자\r\n          </Link>\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default MainMenu;\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\n\r\nimport BBsMain from \"./bbs/BBsMain\";\r\nimport BBsWrite from \"./bbs/BBsWrite\";\r\nimport MainMenu from \"./bbs/MainMenu\";\r\n\r\nfunction App() {\r\n  const header_style = {\r\n    marginBottom: 0,\r\n    backgroundColor: \"green\",\r\n    color: \"white\",\r\n  };\r\n\r\n  /*\r\n    exact 또는 exact={true} 는 / 가 포함된 url이 아니라 \r\n    정확히/ 로 들어왔을 때만 해당 컴포넌트를 그려주게 해주는 것이다. \r\n    이것을 안해주면 /about /posts 등등 다른 url에서도 / 을 포함하고 있기 때문에 \r\n    의도치 않게 함께 그려지는 것을 방지해야 한다.\r\n\r\n    BBsWrite를 insert와 update에서 모두 사용하기 위해\r\n    Switch로 묶고 path varriable을 설정한다.\r\n\r\n\r\n  */\r\n  return (\r\n    <div className=\"container-fluid\">\r\n      <header style={header_style} className=\"jumbotron text-center\">\r\n        <h2>REACT BBS 2020</h2>\r\n        <p>React &amp; Firebase BBS</p>\r\n      </header>\r\n      <Router>\r\n        <MainMenu />\r\n        <Route exact path=\"/\" component={BBsMain} />\r\n        <Switch>\r\n          <Route path=\"/bbsWrite/:seq\" component={BBsWrite} />\r\n          <Route path=\"/bbsWrite/\" component={BBsWrite} />\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}